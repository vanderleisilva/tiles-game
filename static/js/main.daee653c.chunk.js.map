{"version":3,"sources":["container/index.js","colors/index.js","index.js","App.js","game/tiles.js"],"names":["children","className","colorOptions","value","label","initialSelection","props","class","style","marginBottom","closeMenuOnSelect","components","makeAnimated","defaultValue","isMulti","options","ReactDOM","render","useState","columns","setColumns","lines","setLines","start","setStart","square","setSquare","color","setColor","squareColors","setSquareColos","onChange","e","target","type","placeholder","onClick","console","log","colors","Array","from","length","map","v","l","x","c","Math","floor","random","origin","createMap","i","backgroundColor","get","treeSearch","setOrigin","document","getElementById"],"mappings":"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","file":"static/js/main.daee653c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nexport default ({ children }) => (\n  <section className=\"section\">\n    <div className=\"container\">\n      <h1 className=\"title\">Tiles Game</h1>\n      <p className=\"subtitle\">\n        Inform the grid size and <strong>start</strong> the game!\n      </p>\n      {children}\n    </div>\n  </section>\n);\n","import React from \"react\";\n\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\n\nconst colorOptions = [\n  { value: \"red\", label: \"Red\" },\n  { value: \"blue\", label: \"Blue\" },\n  { value: \"yellow\", label: \"Yellow\" },\n  { value: \"orange\", label: \"Orange\" },\n  { value: \"purple\", label: \"Purple\" },\n  { value: \"green\", label: \"Green\" },\n  { value: \"black\", label: \"Black\" }\n];\n\nexport const initialSelection = [\n  colorOptions[0],\n  colorOptions[1],\n  colorOptions[2]\n];\n\nexport default props => (\n  <p class=\"control\" style={{ marginBottom: 16 }}>\n    <Select\n      closeMenuOnSelect={false}\n      components={makeAnimated()}\n      defaultValue={initialSelection}\n      isMulti\n      options={colorOptions}\n      {...props}\n    />\n    <p class=\"help\">Select the colors</p>\n  </p>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useState, Fragment } from \"react\";\nimport { createMap, setOrigin } from \"./game/tiles\";\nimport Container from \"./container\";\nimport SelectColors, { initialSelection } from \"./colors\";\nimport Select from \"react-select\";\n\nexport default () => {\n  const [columns, setColumns] = useState(6);\n  const [lines, setLines] = useState(6);\n  const [start, setStart] = useState(false);\n  const [square, setSquare] = useState([]);\n  const [color, setColor] = useState(\"\");\n  const [squareColors, setSquareColos] = useState(initialSelection);\n\n  const startGame = () => {\n    setStart(true);\n    console.log(squareColors);\n    setSquare(createMap(columns, lines, squareColors.map(i => i.value)));\n  };\n\n  return (\n    <Container>\n      <SelectColors onChange={setSquareColos} />\n      <div class=\"field is-grouped\">\n        <p class=\"control\">\n          <input\n            class=\"input\"\n            value={columns}\n            onChange={e => setColumns(e.target.value)}\n            type=\"text\"\n            placeholder=\"Columns\"\n          />\n          <p class=\"help\">Number of columns</p>\n        </p>\n\n        <p class=\"control\">\n          <input\n            class=\"input\"\n            value={lines}\n            onChange={e => setLines(e.target.value)}\n            type=\"text\"\n            placeholder=\"Lines\"\n          />\n          <p class=\"help\">Number of lines</p>\n        </p>\n        <p class=\"control\">\n          <button onClick={startGame} class=\"button is-info\">\n            {start ? \"Restart\" : \"Start\"}\n          </button>\n        </p>\n      </div>\n      {start && (\n        <Fragment>\n          <table className=\"game\">\n            <tbody>\n              {square.map(l => (\n                <tr>\n                  {l.map(c => (\n                    <td\n                      style={{ backgroundColor: c.color }}\n                      className={c.origin ? \" origin\" : \"\"}\n                    >\n                      <div></div>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div class=\"field is-grouped\">\n            <p class=\"control\">\n              <Select\n                options={squareColors}\n                onChange={e => setColor(e.value)}\n              />\n              <p class=\"help\">Inform the next color</p>\n            </p>\n            <p class=\"control\">\n              <button\n                onClick={() => {\n                  var x = setOrigin(square, color);\n                  setSquare(x);\n                }}\n                class=\"button is-info\"\n              >\n                Apply\n              </button>\n            </p>\n          </div>\n        </Fragment>\n      )}\n    </Container>\n  );\n};\n","const createMap = (columns, lines, colors) =>\n  Array.from({ length: columns }).map((v, l) =>\n    Array.from({ length: lines }).map((x, c) => ({\n      color: colors[Math.floor(Math.random() * colors.length)],\n      origin: l + c == 0\n    }))\n  );\n\nconst setOrigin = (map, color) => {\n  let square = [...map];\n\n  const get = (l, c) => {\n    try {\n      return square[l][c] || {};\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const treeSearch = (l, c) => {\n    if (square[l][c].color === color) {\n      square[l][c].origin = true;\n    }\n\n    if (square[l][c].origin) {\n      square[l][c].color = color;\n    }\n\n    if ((get(l + 1, c).color === color) ^ get(l + 1, c).origin) {\n      treeSearch(l + 1, c);\n    }\n\n    if ((get(l, c + 1).color === color) ^ get(l, c + 1).origin) {\n      treeSearch(l, c + 1);\n    }\n\n    if ((get(l - 1, c).color === color) ^ get(l - 1, c).origin) {\n      treeSearch(l - 1, c);\n    }\n\n    if ((get(l, c - 1).color === color) ^ get(l, c - 1).origin) {\n      treeSearch(l, c - 1);\n    }\n  };\n\n  treeSearch(0, 0);\n\n  return square;\n};\n\nexport { createMap, setOrigin };\n"],"sourceRoot":""}